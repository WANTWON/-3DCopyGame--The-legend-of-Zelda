#pragma once

#include "BaseObj.h"


BEGIN(Engine)
class CModel;
END


BEGIN(Client)

class CPlayer final : public CBaseObj
{
public:
	//ST : Start,  LP : Loop, ED : End
	enum ANIM {IDLE, RUN, WALK, ATK_UP_ED, ATK_UP_LP, ATK_UP_ST, BACK_CONF, BOOM, BOOMERANG_ED, BOOMERANG_ST,
	BOTTLE_CATCH, BOTTLE_SWING, BOTTLE_USE, BOUND_DOWN, BOW_ED, BOW_ST, BUTTON_L_LP, BUTTON_R_LP, CARRY, CARRY_FAIL, CARRY_FAIL_LONG, 
	CASTING_REEL, CASTING_REELFAST, D_JUMP, D_LAND, DASH_CRASH, DASH_LP, DEATH, DEATH_WATER, DEATH_WATER_LP, 
	DEF_UP_ED, DEF_UP_LP, DEF_UP_ST, DIVE, DMG_B, DMG_ELEC, DMG_F, DMG_PLYO_LP, DMG_PRESS, DMG_QUAKE, DMG_WT_B, DMG_WT_F, DOWN_LP, EAT,
	ENTER_WATER, EV_KYORO, EV_LOOK_EGG, EV_LOOK_SHADOW, EV_LOOK_BACK, EV_NO, EV_PRATFALL_ED, EV_PRATFALL_LP, EV_PRATFALL_ST, RV_REMOVE,
	EV_SLASH_HOLD_ED, EV_STAIRS_DOWN, EV_STAIR_UP, EV_WATERFALL, EV_WELL_OUT, EV_YES, FALL, FALL_ANIMATION, FALL_BATABATA, FALL_CARRY,
	FALL_DEATHBALL, FALL_FROM_TOP, FALL_HOLE, FALL_WATER, FISH_HANG_LP, FISH_LOST, FLUTTERING_WAIT, H_JUMP, HOOKSHOT_ED, HOOKSHOT_LP,
	HOOKSHOT_ST, IDLE_CARRY, ITEM_GET_ED, ITEM_GET_LP, ITEM_GET_ST, ITEM_PUT, JUMP, JUMP_CARRY, JUMP_SLASH, KEY_OPEN, LADDER_DOWN,
	LADDER_LEFT, LADDER_RIGHT, LADDER_UP, LADDER_WAIT,  LAND, LAND_CARRY, LV2SWORDGET_ED, LV2SWORDGET_LP, LV2SWORDGET_ST, NOT_CARRY,
	OCARINA_ED, OCARINA_LP, OCARINA_ST, OCARINA_WAIT, POKE, POKE_ENEMY, POWDER, PULL_LP, PULL_ST, PULL_WAIT, PUSH, PUSH_LP, PUSH_ST,
	PUSH_WAIT, RESURRECTION, RESURRECTION_WT, RISE, SHIELD_LP, SH_NOTIHING, SHIELD_ST, SHIELD_HIT, SHOVEL, SLASH, SLASH_HOLD_ED, SLASH_HOLD_LP,
	SUCKED_ED, SUCKED_LP, SUCKED_ST, SWIM, SWIM_FAST, SWIM_IDLE, TALK, THROW, U_SWIM_DEPTH_IN, U_SWIM_DEPTH_OUT, WARP_D_ED, WARP_D_ST, WARP_ED, WARP_ST,
	WT_POKE_ENEMY, WT_SLA_HOLD_ED, WT_SLASH, WT_SLASH_D, WT_SLASH_U, WT_SWIM, WT_SWIM_FAST};

private:
	CPlayer(ID3D11Device* pDevice, ID3D11DeviceContext* pContext);
	CPlayer(const CPlayer& rhs);
	virtual ~CPlayer() = default;

public:
	virtual HRESULT Initialize_Prototype();
	virtual HRESULT Initialize(void* pArg);
	virtual int Tick(_float fTimeDelta);
	virtual void Late_Tick(_float fTimeDelta);
	virtual HRESULT Render();

private:
	void Key_Input(_float fTimeDelta);

private:
	CModel*					m_pModelCom = nullptr;
	ANIM					m_iAnimNum = IDLE;


private:
	virtual HRESULT Ready_Components(void* pArg) override;
	virtual HRESULT SetUp_ShaderResources() override; /* 셰이더 전역변수에 값을 전달한다. */
	virtual HRESULT SetUp_ShaderID() override;

public:
	static CPlayer* Create(ID3D11Device* pDevice, ID3D11DeviceContext* pContext);
	virtual CGameObject* Clone(void* pArg = nullptr);
	virtual void Free() override;
};

END