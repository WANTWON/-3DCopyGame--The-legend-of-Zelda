#pragma once

namespace Client
{
	const unsigned int g_iWinSizeX = 1280;
	const unsigned int g_iWinSizeY = 720;


	enum LEVEL { LEVEL_STATIC, LEVEL_LOADING, LEVEL_LOGO, LEVEL_GAMEPLAY, LEVEL_TAILCAVE, LEVEL_TOWER, LEVEL_ROOM, LEVEL_END };
	enum OBJID { OBJ_BACKGROUND, OBJ_MONSTER, OBJ_BLOCK, OBJ_KEY, OBJ_ITEM,  OBJ_UNINTERATIVE, OBJ_END };

	enum SHADER_NONANIMID { SHADER_DEFAULT, SHADER_ALPHABLEND, SHADER_NONANIM_SHADOW, SHADER_GLOWSHADER };
	enum SHADER_ANIMID { SHADER_ANIMDEFAULT, SHADER_ANIMHIT, SHADER_ANIMDEAD, SHADER_ANIMSHADOW, SHADER_ANIMCHARGE };

	enum SHADERUI_ID { UI_ALPHADEFAULT, UI_ALPHABLEND, UI_PICKED, UI_ALPHASET, UI_SCREEN, UI_EFFECTSCREEN};
	
	enum SHADER_EFFECT_MODEL { SHADERM_SLASH, SHADERM_ROLLCUT , SHADERM_TWOCOLOR_PRIORITY, SHADERM_TWOCOLOR_DEFAULT, SHADERM_ONLY_TEXTURE,
		SHADERM_TWOCOLOR_NOTALPHASET };

	enum SHADER_EFFECT_TEX { SHADER_ONECOLOR_NOTALPHASET, SHADER_ONECOLOR_ALPHASET, SHADER_ONECOLOR_ALPHASET_PRIORITY, SHADER_HITFLASH_TEX, SHADER_HITFLASH_TEX2, SHADER_HITFLASH_TEX3,
		SHADER_TWOCOLOR_NOTALPHASET ,SHADER_TWOCOLOR_PRIORITY, SHADER_TWOCOLOR_DEFAULT, SHADER_SMOKEBACK, SHADER_SMOKEFRONT, SHADER_ONLY_TEXTURE, SHADER_TRAIL};
	
	enum SOUND_ID { SOUND_BGM, SOUND_SYSTEM, SOUND_PLAYER, SOUND_PEFFECT, SOUND_MONSTER, SOUND_MEFFECT, SOUND_OBJECT, SOUND_ACTOR, SOUND_END };

	enum DIR { MINUS, NONE, PLUS };

	typedef struct ObjectInfo
	{
		int iMaxHp;
		int iCurrentHp;
		int iDamage;
		int iCoin = 100;
		
	}OBJINFO;

#define MAX_DISTANCE -999999.f
#define MIN_DISTANCE 999999.f

}

#include <process.h>

// Client_Defines.h

extern HWND			g_hWnd;
extern HINSTANCE	g_hInst;
extern bool			g_FirstLoading;
extern bool			g_bUIMadefirst;
extern float		g_fBGMVolume;
extern float		g_fObjVolume;
extern float		g_fUIVolume;

using namespace Client;